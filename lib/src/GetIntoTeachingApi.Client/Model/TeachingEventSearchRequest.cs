/* 
 * Get into Teaching API - V1
 *
 *   Provides a RESTful API for integrating with the Get into Teaching CRM.    The Get into Teaching (GIT) API sits in front of the GIT CRM, which uses the [Microsoft Dynamics365](https://docs.microsoft.com/en-us/dynamics365/) platform (the [Customer Engagement](https://docs.microsoft.com/en-us/dynamics365/customerengagement/on-premises/developer/overview) module is used for storing Candidate information and the [Marketing](https://docs.microsoft.com/en-us/dynamics365/marketing/developer/using-events-api) module for managing Events).    The GIT API aims to provide:    * Simple, task-based RESTful APIs.  * Message queueing (while the GIT CRM is offline for updates).  * Validation to ensure consistency across services writing to the GIT CRM.                          
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = GetIntoTeachingApi.Client.Client.SwaggerDateConverter;

namespace GetIntoTeachingApi.Client.Model
{
    /// <summary>
    /// TeachingEventSearchRequest
    /// </summary>
    [DataContract]
    public partial class TeachingEventSearchRequest :  IEquatable<TeachingEventSearchRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TeachingEventSearchRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TeachingEventSearchRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TeachingEventSearchRequest" /> class.
        /// </summary>
        /// <param name="postcode">Postcode to center search around. (required).</param>
        /// <param name="radius">Set to filter results to a radius (in miles) around the postcode..</param>
        /// <param name="typeId">Set to filter results to a type of teaching event. Must match an &#x60;typeId&#x60; of the &#x60;TeachingEvent&#x60; schema..</param>
        /// <param name="startAfter">Set to filter results to those that start after a given date..</param>
        /// <param name="startBefore">Set to filter results to those that start before a given date..</param>
        public TeachingEventSearchRequest(string postcode = default(string), int? radius = default(int?), int? typeId = default(int?), DateTime? startAfter = default(DateTime?), DateTime? startBefore = default(DateTime?))
        {
            // to ensure "postcode" is required (not null)
            if (postcode == null)
            {
                throw new InvalidDataException("postcode is a required property for TeachingEventSearchRequest and cannot be null");
            }
            else
            {
                this.Postcode = postcode;
            }
            this.Radius = radius;
            this.TypeId = typeId;
            this.StartAfter = startAfter;
            this.StartBefore = startBefore;
        }
        
        /// <summary>
        /// Postcode to center search around.
        /// </summary>
        /// <value>Postcode to center search around.</value>
        [DataMember(Name="postcode", EmitDefaultValue=false)]
        public string Postcode { get; set; }

        /// <summary>
        /// Set to filter results to a radius (in miles) around the postcode.
        /// </summary>
        /// <value>Set to filter results to a radius (in miles) around the postcode.</value>
        [DataMember(Name="radius", EmitDefaultValue=false)]
        public int? Radius { get; set; }

        /// <summary>
        /// Set to filter results to a type of teaching event. Must match an &#x60;typeId&#x60; of the &#x60;TeachingEvent&#x60; schema.
        /// </summary>
        /// <value>Set to filter results to a type of teaching event. Must match an &#x60;typeId&#x60; of the &#x60;TeachingEvent&#x60; schema.</value>
        [DataMember(Name="typeId", EmitDefaultValue=false)]
        public int? TypeId { get; set; }

        /// <summary>
        /// Set to filter results to those that start after a given date.
        /// </summary>
        /// <value>Set to filter results to those that start after a given date.</value>
        [DataMember(Name="startAfter", EmitDefaultValue=false)]
        public DateTime? StartAfter { get; set; }

        /// <summary>
        /// Set to filter results to those that start before a given date.
        /// </summary>
        /// <value>Set to filter results to those that start before a given date.</value>
        [DataMember(Name="startBefore", EmitDefaultValue=false)]
        public DateTime? StartBefore { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TeachingEventSearchRequest {\n");
            sb.Append("  Postcode: ").Append(Postcode).Append("\n");
            sb.Append("  Radius: ").Append(Radius).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("  StartAfter: ").Append(StartAfter).Append("\n");
            sb.Append("  StartBefore: ").Append(StartBefore).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TeachingEventSearchRequest);
        }

        /// <summary>
        /// Returns true if TeachingEventSearchRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TeachingEventSearchRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TeachingEventSearchRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Postcode == input.Postcode ||
                    (this.Postcode != null &&
                    this.Postcode.Equals(input.Postcode))
                ) && 
                (
                    this.Radius == input.Radius ||
                    (this.Radius != null &&
                    this.Radius.Equals(input.Radius))
                ) && 
                (
                    this.TypeId == input.TypeId ||
                    (this.TypeId != null &&
                    this.TypeId.Equals(input.TypeId))
                ) && 
                (
                    this.StartAfter == input.StartAfter ||
                    (this.StartAfter != null &&
                    this.StartAfter.Equals(input.StartAfter))
                ) && 
                (
                    this.StartBefore == input.StartBefore ||
                    (this.StartBefore != null &&
                    this.StartBefore.Equals(input.StartBefore))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Postcode != null)
                    hashCode = hashCode * 59 + this.Postcode.GetHashCode();
                if (this.Radius != null)
                    hashCode = hashCode * 59 + this.Radius.GetHashCode();
                if (this.TypeId != null)
                    hashCode = hashCode * 59 + this.TypeId.GetHashCode();
                if (this.StartAfter != null)
                    hashCode = hashCode * 59 + this.StartAfter.GetHashCode();
                if (this.StartBefore != null)
                    hashCode = hashCode * 59 + this.StartBefore.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Postcode (string) minLength
            if(this.Postcode != null && this.Postcode.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Postcode, length must be greater than 1.", new [] { "Postcode" });
            }

            // Radius (int?) minimum
            if(this.Radius < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Radius, must be a value greater than or equal to 0.", new [] { "Radius" });
            }

            yield break;
        }
    }

}
