/* 
 * Get into Teaching API - V1
 *
 *   Provides a RESTful API for integrating with the Get into Teaching CRM.    The Get into Teaching (GIT) API sits in front of the GIT CRM, which uses the [Microsoft Dynamics365](https://docs.microsoft.com/en-us/dynamics365/) platform (the [Customer Engagement](https://docs.microsoft.com/en-us/dynamics365/customerengagement/on-premises/developer/overview) module is used for storing Candidate information and the [Marketing](https://docs.microsoft.com/en-us/dynamics365/marketing/developer/using-events-api) module for managing Events).    The GIT API aims to provide:    * Simple, task-based RESTful APIs.  * Message queueing (while the GIT CRM is offline for updates).  * Validation to ensure consistency across services writing to the GIT CRM.                          
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = GetIntoTeachingApi.Client.Client.SwaggerDateConverter;

namespace GetIntoTeachingApi.Client.Model
{
    /// <summary>
    /// MailingListAddMemberRequest
    /// </summary>
    [DataContract]
    public partial class MailingListAddMemberRequest :  IEquatable<MailingListAddMemberRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MailingListAddMemberRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MailingListAddMemberRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MailingListAddMemberRequest" /> class.
        /// </summary>
        /// <param name="candidateId">Set to add an existing candidate to the mailing list..</param>
        /// <param name="preferredTeachingSubjectId">preferredTeachingSubjectId.</param>
        /// <param name="firstName">firstName (required).</param>
        /// <param name="lastName">lastName (required).</param>
        /// <param name="email">email (required).</param>
        /// <param name="telephone">telephone.</param>
        /// <param name="addressPostcode">addressPostcode (required).</param>
        /// <param name="privacyPolicy">privacyPolicy (required).</param>
        public MailingListAddMemberRequest(Guid? candidateId = default(Guid?), Guid? preferredTeachingSubjectId = default(Guid?), string firstName = default(string), string lastName = default(string), string email = default(string), string telephone = default(string), string addressPostcode = default(string), CandidatePrivacyPolicy privacyPolicy = default(CandidatePrivacyPolicy))
        {
            // to ensure "firstName" is required (not null)
            if (firstName == null)
            {
                throw new InvalidDataException("firstName is a required property for MailingListAddMemberRequest and cannot be null");
            }
            else
            {
                this.FirstName = firstName;
            }
            // to ensure "lastName" is required (not null)
            if (lastName == null)
            {
                throw new InvalidDataException("lastName is a required property for MailingListAddMemberRequest and cannot be null");
            }
            else
            {
                this.LastName = lastName;
            }
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new InvalidDataException("email is a required property for MailingListAddMemberRequest and cannot be null");
            }
            else
            {
                this.Email = email;
            }
            // to ensure "addressPostcode" is required (not null)
            if (addressPostcode == null)
            {
                throw new InvalidDataException("addressPostcode is a required property for MailingListAddMemberRequest and cannot be null");
            }
            else
            {
                this.AddressPostcode = addressPostcode;
            }
            // to ensure "privacyPolicy" is required (not null)
            if (privacyPolicy == null)
            {
                throw new InvalidDataException("privacyPolicy is a required property for MailingListAddMemberRequest and cannot be null");
            }
            else
            {
                this.PrivacyPolicy = privacyPolicy;
            }
            this.CandidateId = candidateId;
            this.PreferredTeachingSubjectId = preferredTeachingSubjectId;
            this.Telephone = telephone;
        }
        
        /// <summary>
        /// Set to add an existing candidate to the mailing list.
        /// </summary>
        /// <value>Set to add an existing candidate to the mailing list.</value>
        [DataMember(Name="candidateId", EmitDefaultValue=false)]
        public Guid? CandidateId { get; set; }

        /// <summary>
        /// Gets or Sets PreferredTeachingSubjectId
        /// </summary>
        [DataMember(Name="preferredTeachingSubjectId", EmitDefaultValue=false)]
        public Guid? PreferredTeachingSubjectId { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Telephone
        /// </summary>
        [DataMember(Name="telephone", EmitDefaultValue=false)]
        public string Telephone { get; set; }

        /// <summary>
        /// Gets or Sets AddressPostcode
        /// </summary>
        [DataMember(Name="addressPostcode", EmitDefaultValue=false)]
        public string AddressPostcode { get; set; }

        /// <summary>
        /// Gets or Sets PrivacyPolicy
        /// </summary>
        [DataMember(Name="privacyPolicy", EmitDefaultValue=false)]
        public CandidatePrivacyPolicy PrivacyPolicy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MailingListAddMemberRequest {\n");
            sb.Append("  CandidateId: ").Append(CandidateId).Append("\n");
            sb.Append("  PreferredTeachingSubjectId: ").Append(PreferredTeachingSubjectId).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Telephone: ").Append(Telephone).Append("\n");
            sb.Append("  AddressPostcode: ").Append(AddressPostcode).Append("\n");
            sb.Append("  PrivacyPolicy: ").Append(PrivacyPolicy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MailingListAddMemberRequest);
        }

        /// <summary>
        /// Returns true if MailingListAddMemberRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of MailingListAddMemberRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MailingListAddMemberRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CandidateId == input.CandidateId ||
                    (this.CandidateId != null &&
                    this.CandidateId.Equals(input.CandidateId))
                ) && 
                (
                    this.PreferredTeachingSubjectId == input.PreferredTeachingSubjectId ||
                    (this.PreferredTeachingSubjectId != null &&
                    this.PreferredTeachingSubjectId.Equals(input.PreferredTeachingSubjectId))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Telephone == input.Telephone ||
                    (this.Telephone != null &&
                    this.Telephone.Equals(input.Telephone))
                ) && 
                (
                    this.AddressPostcode == input.AddressPostcode ||
                    (this.AddressPostcode != null &&
                    this.AddressPostcode.Equals(input.AddressPostcode))
                ) && 
                (
                    this.PrivacyPolicy == input.PrivacyPolicy ||
                    (this.PrivacyPolicy != null &&
                    this.PrivacyPolicy.Equals(input.PrivacyPolicy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CandidateId != null)
                    hashCode = hashCode * 59 + this.CandidateId.GetHashCode();
                if (this.PreferredTeachingSubjectId != null)
                    hashCode = hashCode * 59 + this.PreferredTeachingSubjectId.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Telephone != null)
                    hashCode = hashCode * 59 + this.Telephone.GetHashCode();
                if (this.AddressPostcode != null)
                    hashCode = hashCode * 59 + this.AddressPostcode.GetHashCode();
                if (this.PrivacyPolicy != null)
                    hashCode = hashCode * 59 + this.PrivacyPolicy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FirstName (string) maxLength
            if(this.FirstName != null && this.FirstName.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstName, length must be less than 256.", new [] { "FirstName" });
            }

            // FirstName (string) minLength
            if(this.FirstName != null && this.FirstName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstName, length must be greater than 1.", new [] { "FirstName" });
            }

            // LastName (string) maxLength
            if(this.LastName != null && this.LastName.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastName, length must be less than 256.", new [] { "LastName" });
            }

            // LastName (string) minLength
            if(this.LastName != null && this.LastName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastName, length must be greater than 1.", new [] { "LastName" });
            }

            // Email (string) maxLength
            if(this.Email != null && this.Email.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Email, length must be less than 100.", new [] { "Email" });
            }

            // Email (string) minLength
            if(this.Email != null && this.Email.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Email, length must be greater than 1.", new [] { "Email" });
            }

            // Telephone (string) maxLength
            if(this.Telephone != null && this.Telephone.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Telephone, length must be less than 50.", new [] { "Telephone" });
            }

            // Telephone (string) minLength
            if(this.Telephone != null && this.Telephone.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Telephone, length must be greater than 0.", new [] { "Telephone" });
            }

            // AddressPostcode (string) maxLength
            if(this.AddressPostcode != null && this.AddressPostcode.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddressPostcode, length must be less than 40.", new [] { "AddressPostcode" });
            }

            // AddressPostcode (string) minLength
            if(this.AddressPostcode != null && this.AddressPostcode.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddressPostcode, length must be greater than 1.", new [] { "AddressPostcode" });
            }

            yield break;
        }
    }

}
