/* 
 * Get into Teaching API - V1
 *
 *   Provides a RESTful API for integrating with the Get into Teaching CRM.    The Get into Teaching (GIT) API sits in front of the GIT CRM, which uses the [Microsoft Dynamics365](https://docs.microsoft.com/en-us/dynamics365/) platform (the [Customer Engagement](https://docs.microsoft.com/en-us/dynamics365/customerengagement/on-premises/developer/overview) module is used for storing Candidate information and the [Marketing](https://docs.microsoft.com/en-us/dynamics365/marketing/developer/using-events-api) module for managing Events).    The GIT API aims to provide:    * Simple, task-based RESTful APIs.  * Message queueing (while the GIT CRM is offline for updates).  * Validation to ensure consistency across services writing to the GIT CRM.                          
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = GetIntoTeachingApi.Client.Client.SwaggerDateConverter;

namespace GetIntoTeachingApi.Client.Model
{
    /// <summary>
    /// CallbackBookingQuota
    /// </summary>
    [DataContract]
    public partial class CallbackBookingQuota :  IEquatable<CallbackBookingQuota>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CallbackBookingQuota" /> class.
        /// </summary>
        /// <param name="timeSlot">timeSlot.</param>
        /// <param name="day">day.</param>
        /// <param name="startAt">startAt.</param>
        /// <param name="endAt">endAt.</param>
        /// <param name="numberOfBookings">numberOfBookings.</param>
        /// <param name="quota">quota.</param>
        /// <param name="id">id.</param>
        public CallbackBookingQuota(string timeSlot = default(string), string day = default(string), DateTime? startAt = default(DateTime?), DateTime? endAt = default(DateTime?), int? numberOfBookings = default(int?), int? quota = default(int?), Guid? id = default(Guid?))
        {
            this.TimeSlot = timeSlot;
            this.Day = day;
            this.StartAt = startAt;
            this.EndAt = endAt;
            this.NumberOfBookings = numberOfBookings;
            this.Quota = quota;
            this.Id = id;
        }
        
        /// <summary>
        /// Gets or Sets TimeSlot
        /// </summary>
        [DataMember(Name="timeSlot", EmitDefaultValue=false)]
        public string TimeSlot { get; set; }

        /// <summary>
        /// Gets or Sets Day
        /// </summary>
        [DataMember(Name="day", EmitDefaultValue=false)]
        public string Day { get; set; }

        /// <summary>
        /// Gets or Sets StartAt
        /// </summary>
        [DataMember(Name="startAt", EmitDefaultValue=false)]
        public DateTime? StartAt { get; set; }

        /// <summary>
        /// Gets or Sets EndAt
        /// </summary>
        [DataMember(Name="endAt", EmitDefaultValue=false)]
        public DateTime? EndAt { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfBookings
        /// </summary>
        [DataMember(Name="numberOfBookings", EmitDefaultValue=false)]
        public int? NumberOfBookings { get; set; }

        /// <summary>
        /// Gets or Sets Quota
        /// </summary>
        [DataMember(Name="quota", EmitDefaultValue=false)]
        public int? Quota { get; set; }

        /// <summary>
        /// Gets or Sets IsAvailable
        /// </summary>
        [DataMember(Name="isAvailable", EmitDefaultValue=false)]
        public bool? IsAvailable { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallbackBookingQuota {\n");
            sb.Append("  TimeSlot: ").Append(TimeSlot).Append("\n");
            sb.Append("  Day: ").Append(Day).Append("\n");
            sb.Append("  StartAt: ").Append(StartAt).Append("\n");
            sb.Append("  EndAt: ").Append(EndAt).Append("\n");
            sb.Append("  NumberOfBookings: ").Append(NumberOfBookings).Append("\n");
            sb.Append("  Quota: ").Append(Quota).Append("\n");
            sb.Append("  IsAvailable: ").Append(IsAvailable).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CallbackBookingQuota);
        }

        /// <summary>
        /// Returns true if CallbackBookingQuota instances are equal
        /// </summary>
        /// <param name="input">Instance of CallbackBookingQuota to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallbackBookingQuota input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TimeSlot == input.TimeSlot ||
                    (this.TimeSlot != null &&
                    this.TimeSlot.Equals(input.TimeSlot))
                ) && 
                (
                    this.Day == input.Day ||
                    (this.Day != null &&
                    this.Day.Equals(input.Day))
                ) && 
                (
                    this.StartAt == input.StartAt ||
                    (this.StartAt != null &&
                    this.StartAt.Equals(input.StartAt))
                ) && 
                (
                    this.EndAt == input.EndAt ||
                    (this.EndAt != null &&
                    this.EndAt.Equals(input.EndAt))
                ) && 
                (
                    this.NumberOfBookings == input.NumberOfBookings ||
                    (this.NumberOfBookings != null &&
                    this.NumberOfBookings.Equals(input.NumberOfBookings))
                ) && 
                (
                    this.Quota == input.Quota ||
                    (this.Quota != null &&
                    this.Quota.Equals(input.Quota))
                ) && 
                (
                    this.IsAvailable == input.IsAvailable ||
                    (this.IsAvailable != null &&
                    this.IsAvailable.Equals(input.IsAvailable))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TimeSlot != null)
                    hashCode = hashCode * 59 + this.TimeSlot.GetHashCode();
                if (this.Day != null)
                    hashCode = hashCode * 59 + this.Day.GetHashCode();
                if (this.StartAt != null)
                    hashCode = hashCode * 59 + this.StartAt.GetHashCode();
                if (this.EndAt != null)
                    hashCode = hashCode * 59 + this.EndAt.GetHashCode();
                if (this.NumberOfBookings != null)
                    hashCode = hashCode * 59 + this.NumberOfBookings.GetHashCode();
                if (this.Quota != null)
                    hashCode = hashCode * 59 + this.Quota.GetHashCode();
                if (this.IsAvailable != null)
                    hashCode = hashCode * 59 + this.IsAvailable.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
