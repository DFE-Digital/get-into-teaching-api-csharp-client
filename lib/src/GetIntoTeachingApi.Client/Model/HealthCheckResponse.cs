/* 
 * Get into Teaching API - V1
 *
 *   Provides a RESTful API for integrating with the Get into Teaching CRM.    The Get into Teaching (GIT) API sits in front of the GIT CRM, which uses the [Microsoft Dynamics365](https://docs.microsoft.com/en-us/dynamics365/) platform (the [Customer Engagement](https://docs.microsoft.com/en-us/dynamics365/customerengagement/on-premises/developer/overview) module is used for storing Candidate information and the [Marketing](https://docs.microsoft.com/en-us/dynamics365/marketing/developer/using-events-api) module for managing Events).    The GIT API aims to provide:    * Simple, task-based RESTful APIs.  * Message queueing (while the GIT CRM is offline for updates).  * Validation to ensure consistency across services writing to the GIT CRM.                          
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = GetIntoTeachingApi.Client.Client.SwaggerDateConverter;

namespace GetIntoTeachingApi.Client.Model
{
    /// <summary>
    /// HealthCheckResponse
    /// </summary>
    [DataContract]
    public partial class HealthCheckResponse :  IEquatable<HealthCheckResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HealthCheckResponse" /> class.
        /// </summary>
        /// <param name="gitCommitSha">gitCommitSha.</param>
        /// <param name="environment">environment.</param>
        /// <param name="database">database.</param>
        /// <param name="hangfire">hangfire.</param>
        /// <param name="crm">crm.</param>
        /// <param name="notify">notify.</param>
        public HealthCheckResponse(string gitCommitSha = default(string), string environment = default(string), string database = default(string), string hangfire = default(string), string crm = default(string), string notify = default(string))
        {
            this.GitCommitSha = gitCommitSha;
            this.Environment = environment;
            this.Database = database;
            this.Hangfire = hangfire;
            this.Crm = crm;
            this.Notify = notify;
        }
        
        /// <summary>
        /// Gets or Sets GitCommitSha
        /// </summary>
        [DataMember(Name="gitCommitSha", EmitDefaultValue=false)]
        public string GitCommitSha { get; set; }

        /// <summary>
        /// Gets or Sets Environment
        /// </summary>
        [DataMember(Name="environment", EmitDefaultValue=false)]
        public string Environment { get; set; }

        /// <summary>
        /// Gets or Sets Database
        /// </summary>
        [DataMember(Name="database", EmitDefaultValue=false)]
        public string Database { get; set; }

        /// <summary>
        /// Gets or Sets Hangfire
        /// </summary>
        [DataMember(Name="hangfire", EmitDefaultValue=false)]
        public string Hangfire { get; set; }

        /// <summary>
        /// Gets or Sets Crm
        /// </summary>
        [DataMember(Name="crm", EmitDefaultValue=false)]
        public string Crm { get; set; }

        /// <summary>
        /// Gets or Sets Notify
        /// </summary>
        [DataMember(Name="notify", EmitDefaultValue=false)]
        public string Notify { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HealthCheckResponse {\n");
            sb.Append("  GitCommitSha: ").Append(GitCommitSha).Append("\n");
            sb.Append("  Environment: ").Append(Environment).Append("\n");
            sb.Append("  Database: ").Append(Database).Append("\n");
            sb.Append("  Hangfire: ").Append(Hangfire).Append("\n");
            sb.Append("  Crm: ").Append(Crm).Append("\n");
            sb.Append("  Notify: ").Append(Notify).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HealthCheckResponse);
        }

        /// <summary>
        /// Returns true if HealthCheckResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of HealthCheckResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HealthCheckResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GitCommitSha == input.GitCommitSha ||
                    (this.GitCommitSha != null &&
                    this.GitCommitSha.Equals(input.GitCommitSha))
                ) && 
                (
                    this.Environment == input.Environment ||
                    (this.Environment != null &&
                    this.Environment.Equals(input.Environment))
                ) && 
                (
                    this.Database == input.Database ||
                    (this.Database != null &&
                    this.Database.Equals(input.Database))
                ) && 
                (
                    this.Hangfire == input.Hangfire ||
                    (this.Hangfire != null &&
                    this.Hangfire.Equals(input.Hangfire))
                ) && 
                (
                    this.Crm == input.Crm ||
                    (this.Crm != null &&
                    this.Crm.Equals(input.Crm))
                ) && 
                (
                    this.Notify == input.Notify ||
                    (this.Notify != null &&
                    this.Notify.Equals(input.Notify))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GitCommitSha != null)
                    hashCode = hashCode * 59 + this.GitCommitSha.GetHashCode();
                if (this.Environment != null)
                    hashCode = hashCode * 59 + this.Environment.GetHashCode();
                if (this.Database != null)
                    hashCode = hashCode * 59 + this.Database.GetHashCode();
                if (this.Hangfire != null)
                    hashCode = hashCode * 59 + this.Hangfire.GetHashCode();
                if (this.Crm != null)
                    hashCode = hashCode * 59 + this.Crm.GetHashCode();
                if (this.Notify != null)
                    hashCode = hashCode * 59 + this.Notify.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
