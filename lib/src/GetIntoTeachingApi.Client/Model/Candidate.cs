/* 
 * Get into Teaching API - V1
 *
 *   Provides a RESTful API for integrating with the Get into Teaching CRM.    The Get into Teaching (GIT) API sits in front of the GIT CRM, which uses the [Microsoft Dynamics365](https://docs.microsoft.com/en-us/dynamics365/) platform (the [Customer Engagement](https://docs.microsoft.com/en-us/dynamics365/customerengagement/on-premises/developer/overview) module is used for storing Candidate information and the [Marketing](https://docs.microsoft.com/en-us/dynamics365/marketing/developer/using-events-api) module for managing Events).    The GIT API aims to provide:    * Simple, task-based RESTful APIs.  * Message queueing (while the GIT CRM is offline for updates).  * Validation to ensure consistency across services writing to the GIT CRM.                          
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = GetIntoTeachingApi.Client.Client.SwaggerDateConverter;

namespace GetIntoTeachingApi.Client.Model
{
    /// <summary>
    /// Candidate
    /// </summary>
    [DataContract]
    public partial class Candidate :  IEquatable<Candidate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Candidate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Candidate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Candidate" /> class.
        /// </summary>
        /// <param name="preferredTeachingSubjectId">preferredTeachingSubjectId.</param>
        /// <param name="preferredEducationPhaseId">preferredEducationPhaseId.</param>
        /// <param name="locationId">locationId.</param>
        /// <param name="initialTeacherTrainingYearId">initialTeacherTrainingYearId.</param>
        /// <param name="channelId">channelId.</param>
        /// <param name="email">email (required).</param>
        /// <param name="firstName">firstName (required).</param>
        /// <param name="lastName">lastName (required).</param>
        /// <param name="dateOfBirth">dateOfBirth (required).</param>
        /// <param name="telephone">telephone (required).</param>
        /// <param name="addressLine1">addressLine1 (required).</param>
        /// <param name="addressLine2">addressLine2.</param>
        /// <param name="addressLine3">addressLine3.</param>
        /// <param name="addressCity">addressCity (required).</param>
        /// <param name="addressState">addressState (required).</param>
        /// <param name="addressPostcode">addressPostcode (required).</param>
        /// <param name="qualifications">qualifications.</param>
        /// <param name="pastTeachingPositions">pastTeachingPositions.</param>
        /// <param name="phoneCall">phoneCall.</param>
        /// <param name="privacyPolicy">privacyPolicy.</param>
        /// <param name="id">id.</param>
        public Candidate(Guid? preferredTeachingSubjectId = default(Guid?), int? preferredEducationPhaseId = default(int?), int? locationId = default(int?), int? initialTeacherTrainingYearId = default(int?), int? channelId = default(int?), string email = default(string), string firstName = default(string), string lastName = default(string), DateTime? dateOfBirth = default(DateTime?), string telephone = default(string), string addressLine1 = default(string), string addressLine2 = default(string), string addressLine3 = default(string), string addressCity = default(string), string addressState = default(string), string addressPostcode = default(string), List<CandidateQualification> qualifications = default(List<CandidateQualification>), List<CandidatePastTeachingPosition> pastTeachingPositions = default(List<CandidatePastTeachingPosition>), PhoneCall phoneCall = default(PhoneCall), CandidatePrivacyPolicy privacyPolicy = default(CandidatePrivacyPolicy), Guid? id = default(Guid?))
        {
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new InvalidDataException("email is a required property for Candidate and cannot be null");
            }
            else
            {
                this.Email = email;
            }
            // to ensure "firstName" is required (not null)
            if (firstName == null)
            {
                throw new InvalidDataException("firstName is a required property for Candidate and cannot be null");
            }
            else
            {
                this.FirstName = firstName;
            }
            // to ensure "lastName" is required (not null)
            if (lastName == null)
            {
                throw new InvalidDataException("lastName is a required property for Candidate and cannot be null");
            }
            else
            {
                this.LastName = lastName;
            }
            // to ensure "dateOfBirth" is required (not null)
            if (dateOfBirth == null)
            {
                throw new InvalidDataException("dateOfBirth is a required property for Candidate and cannot be null");
            }
            else
            {
                this.DateOfBirth = dateOfBirth;
            }
            // to ensure "telephone" is required (not null)
            if (telephone == null)
            {
                throw new InvalidDataException("telephone is a required property for Candidate and cannot be null");
            }
            else
            {
                this.Telephone = telephone;
            }
            // to ensure "addressLine1" is required (not null)
            if (addressLine1 == null)
            {
                throw new InvalidDataException("addressLine1 is a required property for Candidate and cannot be null");
            }
            else
            {
                this.AddressLine1 = addressLine1;
            }
            // to ensure "addressCity" is required (not null)
            if (addressCity == null)
            {
                throw new InvalidDataException("addressCity is a required property for Candidate and cannot be null");
            }
            else
            {
                this.AddressCity = addressCity;
            }
            // to ensure "addressState" is required (not null)
            if (addressState == null)
            {
                throw new InvalidDataException("addressState is a required property for Candidate and cannot be null");
            }
            else
            {
                this.AddressState = addressState;
            }
            // to ensure "addressPostcode" is required (not null)
            if (addressPostcode == null)
            {
                throw new InvalidDataException("addressPostcode is a required property for Candidate and cannot be null");
            }
            else
            {
                this.AddressPostcode = addressPostcode;
            }
            this.PreferredTeachingSubjectId = preferredTeachingSubjectId;
            this.PreferredEducationPhaseId = preferredEducationPhaseId;
            this.LocationId = locationId;
            this.InitialTeacherTrainingYearId = initialTeacherTrainingYearId;
            this.ChannelId = channelId;
            this.AddressLine2 = addressLine2;
            this.AddressLine3 = addressLine3;
            this.Qualifications = qualifications;
            this.PastTeachingPositions = pastTeachingPositions;
            this.PhoneCall = phoneCall;
            this.PrivacyPolicy = privacyPolicy;
            this.Id = id;
        }
        
        /// <summary>
        /// Gets or Sets PreferredTeachingSubjectId
        /// </summary>
        [DataMember(Name="preferredTeachingSubjectId", EmitDefaultValue=false)]
        public Guid? PreferredTeachingSubjectId { get; set; }

        /// <summary>
        /// Gets or Sets PreferredEducationPhaseId
        /// </summary>
        [DataMember(Name="preferredEducationPhaseId", EmitDefaultValue=false)]
        public int? PreferredEducationPhaseId { get; set; }

        /// <summary>
        /// Gets or Sets LocationId
        /// </summary>
        [DataMember(Name="locationId", EmitDefaultValue=false)]
        public int? LocationId { get; set; }

        /// <summary>
        /// Gets or Sets InitialTeacherTrainingYearId
        /// </summary>
        [DataMember(Name="initialTeacherTrainingYearId", EmitDefaultValue=false)]
        public int? InitialTeacherTrainingYearId { get; set; }

        /// <summary>
        /// Gets or Sets ChannelId
        /// </summary>
        [DataMember(Name="channelId", EmitDefaultValue=false)]
        public int? ChannelId { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets DateOfBirth
        /// </summary>
        [DataMember(Name="dateOfBirth", EmitDefaultValue=false)]
        public DateTime? DateOfBirth { get; set; }

        /// <summary>
        /// Gets or Sets Telephone
        /// </summary>
        [DataMember(Name="telephone", EmitDefaultValue=false)]
        public string Telephone { get; set; }

        /// <summary>
        /// Gets or Sets AddressLine1
        /// </summary>
        [DataMember(Name="addressLine1", EmitDefaultValue=false)]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// Gets or Sets AddressLine2
        /// </summary>
        [DataMember(Name="addressLine2", EmitDefaultValue=false)]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// Gets or Sets AddressLine3
        /// </summary>
        [DataMember(Name="addressLine3", EmitDefaultValue=false)]
        public string AddressLine3 { get; set; }

        /// <summary>
        /// Gets or Sets AddressCity
        /// </summary>
        [DataMember(Name="addressCity", EmitDefaultValue=false)]
        public string AddressCity { get; set; }

        /// <summary>
        /// Gets or Sets AddressState
        /// </summary>
        [DataMember(Name="addressState", EmitDefaultValue=false)]
        public string AddressState { get; set; }

        /// <summary>
        /// Gets or Sets AddressPostcode
        /// </summary>
        [DataMember(Name="addressPostcode", EmitDefaultValue=false)]
        public string AddressPostcode { get; set; }

        /// <summary>
        /// Gets or Sets Qualifications
        /// </summary>
        [DataMember(Name="qualifications", EmitDefaultValue=false)]
        public List<CandidateQualification> Qualifications { get; set; }

        /// <summary>
        /// Gets or Sets PastTeachingPositions
        /// </summary>
        [DataMember(Name="pastTeachingPositions", EmitDefaultValue=false)]
        public List<CandidatePastTeachingPosition> PastTeachingPositions { get; set; }

        /// <summary>
        /// Gets or Sets PhoneCall
        /// </summary>
        [DataMember(Name="phoneCall", EmitDefaultValue=false)]
        public PhoneCall PhoneCall { get; set; }

        /// <summary>
        /// Gets or Sets PrivacyPolicy
        /// </summary>
        [DataMember(Name="privacyPolicy", EmitDefaultValue=false)]
        public CandidatePrivacyPolicy PrivacyPolicy { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Candidate {\n");
            sb.Append("  PreferredTeachingSubjectId: ").Append(PreferredTeachingSubjectId).Append("\n");
            sb.Append("  PreferredEducationPhaseId: ").Append(PreferredEducationPhaseId).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  InitialTeacherTrainingYearId: ").Append(InitialTeacherTrainingYearId).Append("\n");
            sb.Append("  ChannelId: ").Append(ChannelId).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  Telephone: ").Append(Telephone).Append("\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  AddressLine3: ").Append(AddressLine3).Append("\n");
            sb.Append("  AddressCity: ").Append(AddressCity).Append("\n");
            sb.Append("  AddressState: ").Append(AddressState).Append("\n");
            sb.Append("  AddressPostcode: ").Append(AddressPostcode).Append("\n");
            sb.Append("  Qualifications: ").Append(Qualifications).Append("\n");
            sb.Append("  PastTeachingPositions: ").Append(PastTeachingPositions).Append("\n");
            sb.Append("  PhoneCall: ").Append(PhoneCall).Append("\n");
            sb.Append("  PrivacyPolicy: ").Append(PrivacyPolicy).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Candidate);
        }

        /// <summary>
        /// Returns true if Candidate instances are equal
        /// </summary>
        /// <param name="input">Instance of Candidate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Candidate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PreferredTeachingSubjectId == input.PreferredTeachingSubjectId ||
                    (this.PreferredTeachingSubjectId != null &&
                    this.PreferredTeachingSubjectId.Equals(input.PreferredTeachingSubjectId))
                ) && 
                (
                    this.PreferredEducationPhaseId == input.PreferredEducationPhaseId ||
                    (this.PreferredEducationPhaseId != null &&
                    this.PreferredEducationPhaseId.Equals(input.PreferredEducationPhaseId))
                ) && 
                (
                    this.LocationId == input.LocationId ||
                    (this.LocationId != null &&
                    this.LocationId.Equals(input.LocationId))
                ) && 
                (
                    this.InitialTeacherTrainingYearId == input.InitialTeacherTrainingYearId ||
                    (this.InitialTeacherTrainingYearId != null &&
                    this.InitialTeacherTrainingYearId.Equals(input.InitialTeacherTrainingYearId))
                ) && 
                (
                    this.ChannelId == input.ChannelId ||
                    (this.ChannelId != null &&
                    this.ChannelId.Equals(input.ChannelId))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.DateOfBirth == input.DateOfBirth ||
                    (this.DateOfBirth != null &&
                    this.DateOfBirth.Equals(input.DateOfBirth))
                ) && 
                (
                    this.Telephone == input.Telephone ||
                    (this.Telephone != null &&
                    this.Telephone.Equals(input.Telephone))
                ) && 
                (
                    this.AddressLine1 == input.AddressLine1 ||
                    (this.AddressLine1 != null &&
                    this.AddressLine1.Equals(input.AddressLine1))
                ) && 
                (
                    this.AddressLine2 == input.AddressLine2 ||
                    (this.AddressLine2 != null &&
                    this.AddressLine2.Equals(input.AddressLine2))
                ) && 
                (
                    this.AddressLine3 == input.AddressLine3 ||
                    (this.AddressLine3 != null &&
                    this.AddressLine3.Equals(input.AddressLine3))
                ) && 
                (
                    this.AddressCity == input.AddressCity ||
                    (this.AddressCity != null &&
                    this.AddressCity.Equals(input.AddressCity))
                ) && 
                (
                    this.AddressState == input.AddressState ||
                    (this.AddressState != null &&
                    this.AddressState.Equals(input.AddressState))
                ) && 
                (
                    this.AddressPostcode == input.AddressPostcode ||
                    (this.AddressPostcode != null &&
                    this.AddressPostcode.Equals(input.AddressPostcode))
                ) && 
                (
                    this.Qualifications == input.Qualifications ||
                    this.Qualifications != null &&
                    this.Qualifications.SequenceEqual(input.Qualifications)
                ) && 
                (
                    this.PastTeachingPositions == input.PastTeachingPositions ||
                    this.PastTeachingPositions != null &&
                    this.PastTeachingPositions.SequenceEqual(input.PastTeachingPositions)
                ) && 
                (
                    this.PhoneCall == input.PhoneCall ||
                    (this.PhoneCall != null &&
                    this.PhoneCall.Equals(input.PhoneCall))
                ) && 
                (
                    this.PrivacyPolicy == input.PrivacyPolicy ||
                    (this.PrivacyPolicy != null &&
                    this.PrivacyPolicy.Equals(input.PrivacyPolicy))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PreferredTeachingSubjectId != null)
                    hashCode = hashCode * 59 + this.PreferredTeachingSubjectId.GetHashCode();
                if (this.PreferredEducationPhaseId != null)
                    hashCode = hashCode * 59 + this.PreferredEducationPhaseId.GetHashCode();
                if (this.LocationId != null)
                    hashCode = hashCode * 59 + this.LocationId.GetHashCode();
                if (this.InitialTeacherTrainingYearId != null)
                    hashCode = hashCode * 59 + this.InitialTeacherTrainingYearId.GetHashCode();
                if (this.ChannelId != null)
                    hashCode = hashCode * 59 + this.ChannelId.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.DateOfBirth != null)
                    hashCode = hashCode * 59 + this.DateOfBirth.GetHashCode();
                if (this.Telephone != null)
                    hashCode = hashCode * 59 + this.Telephone.GetHashCode();
                if (this.AddressLine1 != null)
                    hashCode = hashCode * 59 + this.AddressLine1.GetHashCode();
                if (this.AddressLine2 != null)
                    hashCode = hashCode * 59 + this.AddressLine2.GetHashCode();
                if (this.AddressLine3 != null)
                    hashCode = hashCode * 59 + this.AddressLine3.GetHashCode();
                if (this.AddressCity != null)
                    hashCode = hashCode * 59 + this.AddressCity.GetHashCode();
                if (this.AddressState != null)
                    hashCode = hashCode * 59 + this.AddressState.GetHashCode();
                if (this.AddressPostcode != null)
                    hashCode = hashCode * 59 + this.AddressPostcode.GetHashCode();
                if (this.Qualifications != null)
                    hashCode = hashCode * 59 + this.Qualifications.GetHashCode();
                if (this.PastTeachingPositions != null)
                    hashCode = hashCode * 59 + this.PastTeachingPositions.GetHashCode();
                if (this.PhoneCall != null)
                    hashCode = hashCode * 59 + this.PhoneCall.GetHashCode();
                if (this.PrivacyPolicy != null)
                    hashCode = hashCode * 59 + this.PrivacyPolicy.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Email (string) maxLength
            if(this.Email != null && this.Email.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Email, length must be less than 100.", new [] { "Email" });
            }

            // Email (string) minLength
            if(this.Email != null && this.Email.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Email, length must be greater than 1.", new [] { "Email" });
            }

            // FirstName (string) maxLength
            if(this.FirstName != null && this.FirstName.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstName, length must be less than 256.", new [] { "FirstName" });
            }

            // FirstName (string) minLength
            if(this.FirstName != null && this.FirstName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstName, length must be greater than 1.", new [] { "FirstName" });
            }

            // LastName (string) maxLength
            if(this.LastName != null && this.LastName.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastName, length must be less than 256.", new [] { "LastName" });
            }

            // LastName (string) minLength
            if(this.LastName != null && this.LastName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastName, length must be greater than 1.", new [] { "LastName" });
            }

            // Telephone (string) maxLength
            if(this.Telephone != null && this.Telephone.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Telephone, length must be less than 50.", new [] { "Telephone" });
            }

            // Telephone (string) minLength
            if(this.Telephone != null && this.Telephone.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Telephone, length must be greater than 1.", new [] { "Telephone" });
            }

            // AddressLine1 (string) maxLength
            if(this.AddressLine1 != null && this.AddressLine1.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddressLine1, length must be less than 1024.", new [] { "AddressLine1" });
            }

            // AddressLine1 (string) minLength
            if(this.AddressLine1 != null && this.AddressLine1.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddressLine1, length must be greater than 1.", new [] { "AddressLine1" });
            }

            // AddressLine2 (string) maxLength
            if(this.AddressLine2 != null && this.AddressLine2.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddressLine2, length must be less than 1024.", new [] { "AddressLine2" });
            }

            // AddressLine2 (string) minLength
            if(this.AddressLine2 != null && this.AddressLine2.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddressLine2, length must be greater than 0.", new [] { "AddressLine2" });
            }

            // AddressLine3 (string) maxLength
            if(this.AddressLine3 != null && this.AddressLine3.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddressLine3, length must be less than 1024.", new [] { "AddressLine3" });
            }

            // AddressLine3 (string) minLength
            if(this.AddressLine3 != null && this.AddressLine3.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddressLine3, length must be greater than 0.", new [] { "AddressLine3" });
            }

            // AddressCity (string) maxLength
            if(this.AddressCity != null && this.AddressCity.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddressCity, length must be less than 128.", new [] { "AddressCity" });
            }

            // AddressCity (string) minLength
            if(this.AddressCity != null && this.AddressCity.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddressCity, length must be greater than 1.", new [] { "AddressCity" });
            }

            // AddressState (string) maxLength
            if(this.AddressState != null && this.AddressState.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddressState, length must be less than 128.", new [] { "AddressState" });
            }

            // AddressState (string) minLength
            if(this.AddressState != null && this.AddressState.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddressState, length must be greater than 1.", new [] { "AddressState" });
            }

            // AddressPostcode (string) maxLength
            if(this.AddressPostcode != null && this.AddressPostcode.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddressPostcode, length must be less than 40.", new [] { "AddressPostcode" });
            }

            // AddressPostcode (string) minLength
            if(this.AddressPostcode != null && this.AddressPostcode.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddressPostcode, length must be greater than 1.", new [] { "AddressPostcode" });
            }

            yield break;
        }
    }

}
