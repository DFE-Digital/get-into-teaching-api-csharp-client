/* 
 * Get into Teaching API - V1
 *
 *   Provides a RESTful API for integrating with the Get into Teaching CRM.    The Get into Teaching (GIT) API sits in front of the GIT CRM, which uses the [Microsoft Dynamics365](https://docs.microsoft.com/en-us/dynamics365/) platform (the [Customer Engagement](https://docs.microsoft.com/en-us/dynamics365/customerengagement/on-premises/developer/overview) module is used for storing Candidate information and the [Marketing](https://docs.microsoft.com/en-us/dynamics365/marketing/developer/using-events-api) module for managing Events).    The GIT API aims to provide:    * Simple, task-based RESTful APIs.  * Message queueing (while the GIT CRM is offline for updates).  * Validation to ensure consistency across services writing to the GIT CRM.                          
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using GetIntoTeachingApi.Client.Client;
using GetIntoTeachingApi.Client.Model;

namespace GetIntoTeachingApi.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITeacherTrainingAdviserApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieves an existing candidate for the Teacher Training Adviser service.
        /// </summary>
        /// <remarks>
        ///   Retrieves an existing candidate for the Teacher Training Adviser service. The &#x60;accessToken&#x60; is obtained from a   &#x60;POST /candidates/access_tokens&#x60; request (you must also ensure the &#x60;ExistingCandidateRequest&#x60; payload you   exchanged for your token matches the request payload here).
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Access token (PIN code).</param>
        /// <param name="body">Candidate access token request (must match an existing candidate).</param>
        /// <returns>Candidate</returns>
        Candidate GetExistingTeacherTrainingAdviserCandidate (string accessToken, ExistingCandidateRequest body);

        /// <summary>
        /// Retrieves an existing candidate for the Teacher Training Adviser service.
        /// </summary>
        /// <remarks>
        ///   Retrieves an existing candidate for the Teacher Training Adviser service. The &#x60;accessToken&#x60; is obtained from a   &#x60;POST /candidates/access_tokens&#x60; request (you must also ensure the &#x60;ExistingCandidateRequest&#x60; payload you   exchanged for your token matches the request payload here).
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Access token (PIN code).</param>
        /// <param name="body">Candidate access token request (must match an existing candidate).</param>
        /// <returns>ApiResponse of Candidate</returns>
        ApiResponse<Candidate> GetExistingTeacherTrainingAdviserCandidateWithHttpInfo (string accessToken, ExistingCandidateRequest body);
        /// <summary>
        /// Upserts a candidate for the Teacher Training Adviser service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Candidate to upsert for the Teacher Training Adviser service.</param>
        /// <returns></returns>
        void UpsertTeacherTrainingAdviserCandidate (Candidate body);

        /// <summary>
        /// Upserts a candidate for the Teacher Training Adviser service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Candidate to upsert for the Teacher Training Adviser service.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpsertTeacherTrainingAdviserCandidateWithHttpInfo (Candidate body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Retrieves an existing candidate for the Teacher Training Adviser service.
        /// </summary>
        /// <remarks>
        ///   Retrieves an existing candidate for the Teacher Training Adviser service. The &#x60;accessToken&#x60; is obtained from a   &#x60;POST /candidates/access_tokens&#x60; request (you must also ensure the &#x60;ExistingCandidateRequest&#x60; payload you   exchanged for your token matches the request payload here).
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Access token (PIN code).</param>
        /// <param name="body">Candidate access token request (must match an existing candidate).</param>
        /// <returns>Task of Candidate</returns>
        System.Threading.Tasks.Task<Candidate> GetExistingTeacherTrainingAdviserCandidateAsync (string accessToken, ExistingCandidateRequest body);

        /// <summary>
        /// Retrieves an existing candidate for the Teacher Training Adviser service.
        /// </summary>
        /// <remarks>
        ///   Retrieves an existing candidate for the Teacher Training Adviser service. The &#x60;accessToken&#x60; is obtained from a   &#x60;POST /candidates/access_tokens&#x60; request (you must also ensure the &#x60;ExistingCandidateRequest&#x60; payload you   exchanged for your token matches the request payload here).
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Access token (PIN code).</param>
        /// <param name="body">Candidate access token request (must match an existing candidate).</param>
        /// <returns>Task of ApiResponse (Candidate)</returns>
        System.Threading.Tasks.Task<ApiResponse<Candidate>> GetExistingTeacherTrainingAdviserCandidateAsyncWithHttpInfo (string accessToken, ExistingCandidateRequest body);
        /// <summary>
        /// Upserts a candidate for the Teacher Training Adviser service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Candidate to upsert for the Teacher Training Adviser service.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpsertTeacherTrainingAdviserCandidateAsync (Candidate body);

        /// <summary>
        /// Upserts a candidate for the Teacher Training Adviser service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Candidate to upsert for the Teacher Training Adviser service.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpsertTeacherTrainingAdviserCandidateAsyncWithHttpInfo (Candidate body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TeacherTrainingAdviserApi : ITeacherTrainingAdviserApi
    {
        private GetIntoTeachingApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TeacherTrainingAdviserApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TeacherTrainingAdviserApi(String basePath)
        {
            this.Configuration = new GetIntoTeachingApi.Client.Client.Configuration { BasePath = basePath };

            ExceptionFactory = GetIntoTeachingApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TeacherTrainingAdviserApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TeacherTrainingAdviserApi(GetIntoTeachingApi.Client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = GetIntoTeachingApi.Client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = GetIntoTeachingApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public GetIntoTeachingApi.Client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public GetIntoTeachingApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Retrieves an existing candidate for the Teacher Training Adviser service.   Retrieves an existing candidate for the Teacher Training Adviser service. The &#x60;accessToken&#x60; is obtained from a   &#x60;POST /candidates/access_tokens&#x60; request (you must also ensure the &#x60;ExistingCandidateRequest&#x60; payload you   exchanged for your token matches the request payload here).
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Access token (PIN code).</param>
        /// <param name="body">Candidate access token request (must match an existing candidate).</param>
        /// <returns>Candidate</returns>
        public Candidate GetExistingTeacherTrainingAdviserCandidate (string accessToken, ExistingCandidateRequest body)
        {
             ApiResponse<Candidate> localVarResponse = GetExistingTeacherTrainingAdviserCandidateWithHttpInfo(accessToken, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves an existing candidate for the Teacher Training Adviser service.   Retrieves an existing candidate for the Teacher Training Adviser service. The &#x60;accessToken&#x60; is obtained from a   &#x60;POST /candidates/access_tokens&#x60; request (you must also ensure the &#x60;ExistingCandidateRequest&#x60; payload you   exchanged for your token matches the request payload here).
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Access token (PIN code).</param>
        /// <param name="body">Candidate access token request (must match an existing candidate).</param>
        /// <returns>ApiResponse of Candidate</returns>
        public ApiResponse< Candidate > GetExistingTeacherTrainingAdviserCandidateWithHttpInfo (string accessToken, ExistingCandidateRequest body)
        {
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling TeacherTrainingAdviserApi->GetExistingTeacherTrainingAdviserCandidate");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TeacherTrainingAdviserApi->GetExistingTeacherTrainingAdviserCandidate");

            var localVarPath = "/api/teacher_training_adviser/candidates/{accessToken}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accessToken != null) localVarPathParams.Add("accessToken", this.Configuration.ApiClient.ParameterToString(accessToken)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExistingTeacherTrainingAdviserCandidate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Candidate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Candidate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Candidate)));
        }

        /// <summary>
        /// Retrieves an existing candidate for the Teacher Training Adviser service.   Retrieves an existing candidate for the Teacher Training Adviser service. The &#x60;accessToken&#x60; is obtained from a   &#x60;POST /candidates/access_tokens&#x60; request (you must also ensure the &#x60;ExistingCandidateRequest&#x60; payload you   exchanged for your token matches the request payload here).
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Access token (PIN code).</param>
        /// <param name="body">Candidate access token request (must match an existing candidate).</param>
        /// <returns>Task of Candidate</returns>
        public async System.Threading.Tasks.Task<Candidate> GetExistingTeacherTrainingAdviserCandidateAsync (string accessToken, ExistingCandidateRequest body)
        {
             ApiResponse<Candidate> localVarResponse = await GetExistingTeacherTrainingAdviserCandidateAsyncWithHttpInfo(accessToken, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves an existing candidate for the Teacher Training Adviser service.   Retrieves an existing candidate for the Teacher Training Adviser service. The &#x60;accessToken&#x60; is obtained from a   &#x60;POST /candidates/access_tokens&#x60; request (you must also ensure the &#x60;ExistingCandidateRequest&#x60; payload you   exchanged for your token matches the request payload here).
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Access token (PIN code).</param>
        /// <param name="body">Candidate access token request (must match an existing candidate).</param>
        /// <returns>Task of ApiResponse (Candidate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Candidate>> GetExistingTeacherTrainingAdviserCandidateAsyncWithHttpInfo (string accessToken, ExistingCandidateRequest body)
        {
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling TeacherTrainingAdviserApi->GetExistingTeacherTrainingAdviserCandidate");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TeacherTrainingAdviserApi->GetExistingTeacherTrainingAdviserCandidate");

            var localVarPath = "/api/teacher_training_adviser/candidates/{accessToken}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accessToken != null) localVarPathParams.Add("accessToken", this.Configuration.ApiClient.ParameterToString(accessToken)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExistingTeacherTrainingAdviserCandidate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Candidate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Candidate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Candidate)));
        }

        /// <summary>
        /// Upserts a candidate for the Teacher Training Adviser service. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Candidate to upsert for the Teacher Training Adviser service.</param>
        /// <returns></returns>
        public void UpsertTeacherTrainingAdviserCandidate (Candidate body)
        {
             UpsertTeacherTrainingAdviserCandidateWithHttpInfo(body);
        }

        /// <summary>
        /// Upserts a candidate for the Teacher Training Adviser service. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Candidate to upsert for the Teacher Training Adviser service.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpsertTeacherTrainingAdviserCandidateWithHttpInfo (Candidate body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TeacherTrainingAdviserApi->UpsertTeacherTrainingAdviserCandidate");

            var localVarPath = "/api/teacher_training_adviser/candidates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpsertTeacherTrainingAdviserCandidate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Upserts a candidate for the Teacher Training Adviser service. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Candidate to upsert for the Teacher Training Adviser service.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpsertTeacherTrainingAdviserCandidateAsync (Candidate body)
        {
             await UpsertTeacherTrainingAdviserCandidateAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Upserts a candidate for the Teacher Training Adviser service. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Candidate to upsert for the Teacher Training Adviser service.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpsertTeacherTrainingAdviserCandidateAsyncWithHttpInfo (Candidate body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TeacherTrainingAdviserApi->UpsertTeacherTrainingAdviserCandidate");

            var localVarPath = "/api/teacher_training_adviser/candidates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpsertTeacherTrainingAdviserCandidate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
