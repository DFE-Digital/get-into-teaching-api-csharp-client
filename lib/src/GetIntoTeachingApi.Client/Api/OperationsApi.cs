/* 
 * Get into Teaching API - V1
 *
 *   Provides a RESTful API for integrating with the Get into Teaching CRM.    The Get into Teaching (GIT) API sits in front of the GIT CRM, which uses the [Microsoft Dynamics365](https://docs.microsoft.com/en-us/dynamics365/) platform (the [Customer Engagement](https://docs.microsoft.com/en-us/dynamics365/customerengagement/on-premises/developer/overview) module is used for storing Candidate information and the [Marketing](https://docs.microsoft.com/en-us/dynamics365/marketing/developer/using-events-api) module for managing Events).    The GIT API aims to provide:    * Simple, task-based RESTful APIs.  * Message queueing (while the GIT CRM is offline for updates).  * Validation to ensure consistency across services writing to the GIT CRM.                          
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using GetIntoTeachingApi.Client.Client;
using GetIntoTeachingApi.Client.Model;

namespace GetIntoTeachingApi.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOperationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Generates the mapping information.
        /// </summary>
        /// <remarks>
        /// Generates the mapping information describing how the models in the API map to the corresponding entities in Dynamics 365.
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;MappingInfo&gt;</returns>
        List<MappingInfo> GenerateMappingInfo ();

        /// <summary>
        /// Generates the mapping information.
        /// </summary>
        /// <remarks>
        /// Generates the mapping information describing how the models in the API map to the corresponding entities in Dynamics 365.
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;MappingInfo&gt;</returns>
        ApiResponse<List<MappingInfo>> GenerateMappingInfoWithHttpInfo ();
        /// <summary>
        /// Performs a health check.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>HealthCheckResponse</returns>
        HealthCheckResponse HealthCheck ();

        /// <summary>
        /// Performs a health check.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of HealthCheckResponse</returns>
        ApiResponse<HealthCheckResponse> HealthCheckWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Generates the mapping information.
        /// </summary>
        /// <remarks>
        /// Generates the mapping information describing how the models in the API map to the corresponding entities in Dynamics 365.
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;MappingInfo&gt;</returns>
        System.Threading.Tasks.Task<List<MappingInfo>> GenerateMappingInfoAsync ();

        /// <summary>
        /// Generates the mapping information.
        /// </summary>
        /// <remarks>
        /// Generates the mapping information describing how the models in the API map to the corresponding entities in Dynamics 365.
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;MappingInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MappingInfo>>> GenerateMappingInfoAsyncWithHttpInfo ();
        /// <summary>
        /// Performs a health check.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of HealthCheckResponse</returns>
        System.Threading.Tasks.Task<HealthCheckResponse> HealthCheckAsync ();

        /// <summary>
        /// Performs a health check.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (HealthCheckResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<HealthCheckResponse>> HealthCheckAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OperationsApi : IOperationsApi
    {
        private GetIntoTeachingApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OperationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OperationsApi(String basePath)
        {
            this.Configuration = new GetIntoTeachingApi.Client.Client.Configuration { BasePath = basePath };

            ExceptionFactory = GetIntoTeachingApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OperationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OperationsApi(GetIntoTeachingApi.Client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = GetIntoTeachingApi.Client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = GetIntoTeachingApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public GetIntoTeachingApi.Client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public GetIntoTeachingApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Generates the mapping information. Generates the mapping information describing how the models in the API map to the corresponding entities in Dynamics 365.
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;MappingInfo&gt;</returns>
        public List<MappingInfo> GenerateMappingInfo ()
        {
             ApiResponse<List<MappingInfo>> localVarResponse = GenerateMappingInfoWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generates the mapping information. Generates the mapping information describing how the models in the API map to the corresponding entities in Dynamics 365.
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;MappingInfo&gt;</returns>
        public ApiResponse< List<MappingInfo> > GenerateMappingInfoWithHttpInfo ()
        {

            var localVarPath = "/api/operations/generate_mapping_info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateMappingInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MappingInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MappingInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MappingInfo>)));
        }

        /// <summary>
        /// Generates the mapping information. Generates the mapping information describing how the models in the API map to the corresponding entities in Dynamics 365.
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;MappingInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<MappingInfo>> GenerateMappingInfoAsync ()
        {
             ApiResponse<List<MappingInfo>> localVarResponse = await GenerateMappingInfoAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generates the mapping information. Generates the mapping information describing how the models in the API map to the corresponding entities in Dynamics 365.
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;MappingInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MappingInfo>>> GenerateMappingInfoAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/operations/generate_mapping_info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateMappingInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MappingInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MappingInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MappingInfo>)));
        }

        /// <summary>
        /// Performs a health check. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>HealthCheckResponse</returns>
        public HealthCheckResponse HealthCheck ()
        {
             ApiResponse<HealthCheckResponse> localVarResponse = HealthCheckWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Performs a health check. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of HealthCheckResponse</returns>
        public ApiResponse< HealthCheckResponse > HealthCheckWithHttpInfo ()
        {

            var localVarPath = "/api/operations/health_check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HealthCheck", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HealthCheckResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HealthCheckResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HealthCheckResponse)));
        }

        /// <summary>
        /// Performs a health check. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of HealthCheckResponse</returns>
        public async System.Threading.Tasks.Task<HealthCheckResponse> HealthCheckAsync ()
        {
             ApiResponse<HealthCheckResponse> localVarResponse = await HealthCheckAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Performs a health check. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (HealthCheckResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HealthCheckResponse>> HealthCheckAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/operations/health_check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HealthCheck", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HealthCheckResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HealthCheckResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HealthCheckResponse)));
        }

    }
}
