/* 
 * Get into Teaching API - V1
 *
 *   Provides a RESTful API for integrating with the Get into Teaching CRM.    The Get into Teaching (GIT) API sits in front of the GIT CRM, which uses the [Microsoft Dynamics365](https://docs.microsoft.com/en-us/dynamics365/) platform (the [Customer Engagement](https://docs.microsoft.com/en-us/dynamics365/customerengagement/on-premises/developer/overview) module is used for storing Candidate information and the [Marketing](https://docs.microsoft.com/en-us/dynamics365/marketing/developer/using-events-api) module for managing Events).    The GIT API aims to provide:    * Simple, task-based RESTful APIs.  * Message queueing (while the GIT CRM is offline for updates).  * Validation to ensure consistency across services writing to the GIT CRM.                          
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using GetIntoTeachingApi.Client.Client;
using GetIntoTeachingApi.Client.Model;

namespace GetIntoTeachingApi.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITypesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieves the list of candidate channels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TypeEntity&gt;</returns>
        List<TypeEntity> GetCandidateChannels ();

        /// <summary>
        /// Retrieves the list of candidate channels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TypeEntity&gt;</returns>
        ApiResponse<List<TypeEntity>> GetCandidateChannelsWithHttpInfo ();
        /// <summary>
        /// Retrieves the list of candidate initial teacher training years.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TypeEntity&gt;</returns>
        List<TypeEntity> GetCandidateInitialTeacherTrainingYears ();

        /// <summary>
        /// Retrieves the list of candidate initial teacher training years.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TypeEntity&gt;</returns>
        ApiResponse<List<TypeEntity>> GetCandidateInitialTeacherTrainingYearsWithHttpInfo ();
        /// <summary>
        /// Retrieves the list of candidate locations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TypeEntity&gt;</returns>
        List<TypeEntity> GetCandidateLocations ();

        /// <summary>
        /// Retrieves the list of candidate locations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TypeEntity&gt;</returns>
        ApiResponse<List<TypeEntity>> GetCandidateLocationsWithHttpInfo ();
        /// <summary>
        /// Retrieves the list of candidate preferred education phases.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TypeEntity&gt;</returns>
        List<TypeEntity> GetCandidatePreferredEducationPhases ();

        /// <summary>
        /// Retrieves the list of candidate preferred education phases.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TypeEntity&gt;</returns>
        ApiResponse<List<TypeEntity>> GetCandidatePreferredEducationPhasesWithHttpInfo ();
        /// <summary>
        /// Retrieves the list of countries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TypeEntity&gt;</returns>
        List<TypeEntity> GetCountryTypes ();

        /// <summary>
        /// Retrieves the list of countries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TypeEntity&gt;</returns>
        ApiResponse<List<TypeEntity>> GetCountryTypesWithHttpInfo ();
        /// <summary>
        /// Retrieves the list of past teaching position education phases.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TypeEntity&gt;</returns>
        List<TypeEntity> GetPastTeachingPositionEducationPhases ();

        /// <summary>
        /// Retrieves the list of past teaching position education phases.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TypeEntity&gt;</returns>
        ApiResponse<List<TypeEntity>> GetPastTeachingPositionEducationPhasesWithHttpInfo ();
        /// <summary>
        /// Retrieves the list of phone call channels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TypeEntity&gt;</returns>
        List<TypeEntity> GetPhoneCallChannels ();

        /// <summary>
        /// Retrieves the list of phone call channels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TypeEntity&gt;</returns>
        ApiResponse<List<TypeEntity>> GetPhoneCallChannelsWithHttpInfo ();
        /// <summary>
        /// Retrieves the list of qualification categories.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TypeEntity&gt;</returns>
        List<TypeEntity> GetQualificationCategories ();

        /// <summary>
        /// Retrieves the list of qualification categories.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TypeEntity&gt;</returns>
        ApiResponse<List<TypeEntity>> GetQualificationCategoriesWithHttpInfo ();
        /// <summary>
        /// Retrieves the list of qualification degree status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TypeEntity&gt;</returns>
        List<TypeEntity> GetQualificationDegreeStatus ();

        /// <summary>
        /// Retrieves the list of qualification degree status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TypeEntity&gt;</returns>
        ApiResponse<List<TypeEntity>> GetQualificationDegreeStatusWithHttpInfo ();
        /// <summary>
        /// Retrieves the list of qualification types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TypeEntity&gt;</returns>
        List<TypeEntity> GetQualificationTypes ();

        /// <summary>
        /// Retrieves the list of qualification types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TypeEntity&gt;</returns>
        ApiResponse<List<TypeEntity>> GetQualificationTypesWithHttpInfo ();
        /// <summary>
        /// Retrieves the list of teaching event types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TypeEntity&gt;</returns>
        List<TypeEntity> GetTeachingEventTypes ();

        /// <summary>
        /// Retrieves the list of teaching event types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TypeEntity&gt;</returns>
        ApiResponse<List<TypeEntity>> GetTeachingEventTypesWithHttpInfo ();
        /// <summary>
        /// Retrieves the list of teaching subjects.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TypeEntity&gt;</returns>
        List<TypeEntity> GetTeachingSubjects ();

        /// <summary>
        /// Retrieves the list of teaching subjects.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TypeEntity&gt;</returns>
        ApiResponse<List<TypeEntity>> GetTeachingSubjectsWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Retrieves the list of candidate channels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TypeEntity&gt;</returns>
        System.Threading.Tasks.Task<List<TypeEntity>> GetCandidateChannelsAsync ();

        /// <summary>
        /// Retrieves the list of candidate channels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TypeEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TypeEntity>>> GetCandidateChannelsAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieves the list of candidate initial teacher training years.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TypeEntity&gt;</returns>
        System.Threading.Tasks.Task<List<TypeEntity>> GetCandidateInitialTeacherTrainingYearsAsync ();

        /// <summary>
        /// Retrieves the list of candidate initial teacher training years.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TypeEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TypeEntity>>> GetCandidateInitialTeacherTrainingYearsAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieves the list of candidate locations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TypeEntity&gt;</returns>
        System.Threading.Tasks.Task<List<TypeEntity>> GetCandidateLocationsAsync ();

        /// <summary>
        /// Retrieves the list of candidate locations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TypeEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TypeEntity>>> GetCandidateLocationsAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieves the list of candidate preferred education phases.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TypeEntity&gt;</returns>
        System.Threading.Tasks.Task<List<TypeEntity>> GetCandidatePreferredEducationPhasesAsync ();

        /// <summary>
        /// Retrieves the list of candidate preferred education phases.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TypeEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TypeEntity>>> GetCandidatePreferredEducationPhasesAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieves the list of countries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TypeEntity&gt;</returns>
        System.Threading.Tasks.Task<List<TypeEntity>> GetCountryTypesAsync ();

        /// <summary>
        /// Retrieves the list of countries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TypeEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TypeEntity>>> GetCountryTypesAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieves the list of past teaching position education phases.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TypeEntity&gt;</returns>
        System.Threading.Tasks.Task<List<TypeEntity>> GetPastTeachingPositionEducationPhasesAsync ();

        /// <summary>
        /// Retrieves the list of past teaching position education phases.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TypeEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TypeEntity>>> GetPastTeachingPositionEducationPhasesAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieves the list of phone call channels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TypeEntity&gt;</returns>
        System.Threading.Tasks.Task<List<TypeEntity>> GetPhoneCallChannelsAsync ();

        /// <summary>
        /// Retrieves the list of phone call channels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TypeEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TypeEntity>>> GetPhoneCallChannelsAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieves the list of qualification categories.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TypeEntity&gt;</returns>
        System.Threading.Tasks.Task<List<TypeEntity>> GetQualificationCategoriesAsync ();

        /// <summary>
        /// Retrieves the list of qualification categories.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TypeEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TypeEntity>>> GetQualificationCategoriesAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieves the list of qualification degree status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TypeEntity&gt;</returns>
        System.Threading.Tasks.Task<List<TypeEntity>> GetQualificationDegreeStatusAsync ();

        /// <summary>
        /// Retrieves the list of qualification degree status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TypeEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TypeEntity>>> GetQualificationDegreeStatusAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieves the list of qualification types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TypeEntity&gt;</returns>
        System.Threading.Tasks.Task<List<TypeEntity>> GetQualificationTypesAsync ();

        /// <summary>
        /// Retrieves the list of qualification types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TypeEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TypeEntity>>> GetQualificationTypesAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieves the list of teaching event types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TypeEntity&gt;</returns>
        System.Threading.Tasks.Task<List<TypeEntity>> GetTeachingEventTypesAsync ();

        /// <summary>
        /// Retrieves the list of teaching event types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TypeEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TypeEntity>>> GetTeachingEventTypesAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieves the list of teaching subjects.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TypeEntity&gt;</returns>
        System.Threading.Tasks.Task<List<TypeEntity>> GetTeachingSubjectsAsync ();

        /// <summary>
        /// Retrieves the list of teaching subjects.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TypeEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TypeEntity>>> GetTeachingSubjectsAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TypesApi : ITypesApi
    {
        private GetIntoTeachingApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TypesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TypesApi(String basePath)
        {
            this.Configuration = new GetIntoTeachingApi.Client.Client.Configuration { BasePath = basePath };

            ExceptionFactory = GetIntoTeachingApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TypesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TypesApi(GetIntoTeachingApi.Client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = GetIntoTeachingApi.Client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = GetIntoTeachingApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public GetIntoTeachingApi.Client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public GetIntoTeachingApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Retrieves the list of candidate channels. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TypeEntity&gt;</returns>
        public List<TypeEntity> GetCandidateChannels ()
        {
             ApiResponse<List<TypeEntity>> localVarResponse = GetCandidateChannelsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the list of candidate channels. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TypeEntity&gt;</returns>
        public ApiResponse< List<TypeEntity> > GetCandidateChannelsWithHttpInfo ()
        {

            var localVarPath = "/api/types/candidate/channels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCandidateChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TypeEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TypeEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TypeEntity>)));
        }

        /// <summary>
        /// Retrieves the list of candidate channels. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TypeEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<TypeEntity>> GetCandidateChannelsAsync ()
        {
             ApiResponse<List<TypeEntity>> localVarResponse = await GetCandidateChannelsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves the list of candidate channels. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TypeEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TypeEntity>>> GetCandidateChannelsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/types/candidate/channels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCandidateChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TypeEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TypeEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TypeEntity>)));
        }

        /// <summary>
        /// Retrieves the list of candidate initial teacher training years. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TypeEntity&gt;</returns>
        public List<TypeEntity> GetCandidateInitialTeacherTrainingYears ()
        {
             ApiResponse<List<TypeEntity>> localVarResponse = GetCandidateInitialTeacherTrainingYearsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the list of candidate initial teacher training years. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TypeEntity&gt;</returns>
        public ApiResponse< List<TypeEntity> > GetCandidateInitialTeacherTrainingYearsWithHttpInfo ()
        {

            var localVarPath = "/api/types/candidate/initial_teacher_training_years";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCandidateInitialTeacherTrainingYears", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TypeEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TypeEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TypeEntity>)));
        }

        /// <summary>
        /// Retrieves the list of candidate initial teacher training years. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TypeEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<TypeEntity>> GetCandidateInitialTeacherTrainingYearsAsync ()
        {
             ApiResponse<List<TypeEntity>> localVarResponse = await GetCandidateInitialTeacherTrainingYearsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves the list of candidate initial teacher training years. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TypeEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TypeEntity>>> GetCandidateInitialTeacherTrainingYearsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/types/candidate/initial_teacher_training_years";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCandidateInitialTeacherTrainingYears", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TypeEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TypeEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TypeEntity>)));
        }

        /// <summary>
        /// Retrieves the list of candidate locations. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TypeEntity&gt;</returns>
        public List<TypeEntity> GetCandidateLocations ()
        {
             ApiResponse<List<TypeEntity>> localVarResponse = GetCandidateLocationsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the list of candidate locations. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TypeEntity&gt;</returns>
        public ApiResponse< List<TypeEntity> > GetCandidateLocationsWithHttpInfo ()
        {

            var localVarPath = "/api/types/candidate/locations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCandidateLocations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TypeEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TypeEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TypeEntity>)));
        }

        /// <summary>
        /// Retrieves the list of candidate locations. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TypeEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<TypeEntity>> GetCandidateLocationsAsync ()
        {
             ApiResponse<List<TypeEntity>> localVarResponse = await GetCandidateLocationsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves the list of candidate locations. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TypeEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TypeEntity>>> GetCandidateLocationsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/types/candidate/locations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCandidateLocations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TypeEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TypeEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TypeEntity>)));
        }

        /// <summary>
        /// Retrieves the list of candidate preferred education phases. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TypeEntity&gt;</returns>
        public List<TypeEntity> GetCandidatePreferredEducationPhases ()
        {
             ApiResponse<List<TypeEntity>> localVarResponse = GetCandidatePreferredEducationPhasesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the list of candidate preferred education phases. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TypeEntity&gt;</returns>
        public ApiResponse< List<TypeEntity> > GetCandidatePreferredEducationPhasesWithHttpInfo ()
        {

            var localVarPath = "/api/types/candidate/preferred_education_phases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCandidatePreferredEducationPhases", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TypeEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TypeEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TypeEntity>)));
        }

        /// <summary>
        /// Retrieves the list of candidate preferred education phases. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TypeEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<TypeEntity>> GetCandidatePreferredEducationPhasesAsync ()
        {
             ApiResponse<List<TypeEntity>> localVarResponse = await GetCandidatePreferredEducationPhasesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves the list of candidate preferred education phases. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TypeEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TypeEntity>>> GetCandidatePreferredEducationPhasesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/types/candidate/preferred_education_phases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCandidatePreferredEducationPhases", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TypeEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TypeEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TypeEntity>)));
        }

        /// <summary>
        /// Retrieves the list of countries. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TypeEntity&gt;</returns>
        public List<TypeEntity> GetCountryTypes ()
        {
             ApiResponse<List<TypeEntity>> localVarResponse = GetCountryTypesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the list of countries. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TypeEntity&gt;</returns>
        public ApiResponse< List<TypeEntity> > GetCountryTypesWithHttpInfo ()
        {

            var localVarPath = "/api/types/countries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCountryTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TypeEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TypeEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TypeEntity>)));
        }

        /// <summary>
        /// Retrieves the list of countries. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TypeEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<TypeEntity>> GetCountryTypesAsync ()
        {
             ApiResponse<List<TypeEntity>> localVarResponse = await GetCountryTypesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves the list of countries. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TypeEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TypeEntity>>> GetCountryTypesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/types/countries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCountryTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TypeEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TypeEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TypeEntity>)));
        }

        /// <summary>
        /// Retrieves the list of past teaching position education phases. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TypeEntity&gt;</returns>
        public List<TypeEntity> GetPastTeachingPositionEducationPhases ()
        {
             ApiResponse<List<TypeEntity>> localVarResponse = GetPastTeachingPositionEducationPhasesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the list of past teaching position education phases. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TypeEntity&gt;</returns>
        public ApiResponse< List<TypeEntity> > GetPastTeachingPositionEducationPhasesWithHttpInfo ()
        {

            var localVarPath = "/api/types/past_teaching_position/education_phases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPastTeachingPositionEducationPhases", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TypeEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TypeEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TypeEntity>)));
        }

        /// <summary>
        /// Retrieves the list of past teaching position education phases. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TypeEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<TypeEntity>> GetPastTeachingPositionEducationPhasesAsync ()
        {
             ApiResponse<List<TypeEntity>> localVarResponse = await GetPastTeachingPositionEducationPhasesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves the list of past teaching position education phases. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TypeEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TypeEntity>>> GetPastTeachingPositionEducationPhasesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/types/past_teaching_position/education_phases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPastTeachingPositionEducationPhases", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TypeEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TypeEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TypeEntity>)));
        }

        /// <summary>
        /// Retrieves the list of phone call channels. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TypeEntity&gt;</returns>
        public List<TypeEntity> GetPhoneCallChannels ()
        {
             ApiResponse<List<TypeEntity>> localVarResponse = GetPhoneCallChannelsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the list of phone call channels. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TypeEntity&gt;</returns>
        public ApiResponse< List<TypeEntity> > GetPhoneCallChannelsWithHttpInfo ()
        {

            var localVarPath = "/api/types/phone_call/channels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPhoneCallChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TypeEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TypeEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TypeEntity>)));
        }

        /// <summary>
        /// Retrieves the list of phone call channels. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TypeEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<TypeEntity>> GetPhoneCallChannelsAsync ()
        {
             ApiResponse<List<TypeEntity>> localVarResponse = await GetPhoneCallChannelsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves the list of phone call channels. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TypeEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TypeEntity>>> GetPhoneCallChannelsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/types/phone_call/channels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPhoneCallChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TypeEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TypeEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TypeEntity>)));
        }

        /// <summary>
        /// Retrieves the list of qualification categories. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TypeEntity&gt;</returns>
        public List<TypeEntity> GetQualificationCategories ()
        {
             ApiResponse<List<TypeEntity>> localVarResponse = GetQualificationCategoriesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the list of qualification categories. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TypeEntity&gt;</returns>
        public ApiResponse< List<TypeEntity> > GetQualificationCategoriesWithHttpInfo ()
        {

            var localVarPath = "/api/types/qualification/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQualificationCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TypeEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TypeEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TypeEntity>)));
        }

        /// <summary>
        /// Retrieves the list of qualification categories. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TypeEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<TypeEntity>> GetQualificationCategoriesAsync ()
        {
             ApiResponse<List<TypeEntity>> localVarResponse = await GetQualificationCategoriesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves the list of qualification categories. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TypeEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TypeEntity>>> GetQualificationCategoriesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/types/qualification/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQualificationCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TypeEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TypeEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TypeEntity>)));
        }

        /// <summary>
        /// Retrieves the list of qualification degree status. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TypeEntity&gt;</returns>
        public List<TypeEntity> GetQualificationDegreeStatus ()
        {
             ApiResponse<List<TypeEntity>> localVarResponse = GetQualificationDegreeStatusWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the list of qualification degree status. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TypeEntity&gt;</returns>
        public ApiResponse< List<TypeEntity> > GetQualificationDegreeStatusWithHttpInfo ()
        {

            var localVarPath = "/api/types/qualification/degree_status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQualificationDegreeStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TypeEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TypeEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TypeEntity>)));
        }

        /// <summary>
        /// Retrieves the list of qualification degree status. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TypeEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<TypeEntity>> GetQualificationDegreeStatusAsync ()
        {
             ApiResponse<List<TypeEntity>> localVarResponse = await GetQualificationDegreeStatusAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves the list of qualification degree status. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TypeEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TypeEntity>>> GetQualificationDegreeStatusAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/types/qualification/degree_status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQualificationDegreeStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TypeEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TypeEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TypeEntity>)));
        }

        /// <summary>
        /// Retrieves the list of qualification types. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TypeEntity&gt;</returns>
        public List<TypeEntity> GetQualificationTypes ()
        {
             ApiResponse<List<TypeEntity>> localVarResponse = GetQualificationTypesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the list of qualification types. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TypeEntity&gt;</returns>
        public ApiResponse< List<TypeEntity> > GetQualificationTypesWithHttpInfo ()
        {

            var localVarPath = "/api/types/qualification/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQualificationTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TypeEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TypeEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TypeEntity>)));
        }

        /// <summary>
        /// Retrieves the list of qualification types. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TypeEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<TypeEntity>> GetQualificationTypesAsync ()
        {
             ApiResponse<List<TypeEntity>> localVarResponse = await GetQualificationTypesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves the list of qualification types. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TypeEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TypeEntity>>> GetQualificationTypesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/types/qualification/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQualificationTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TypeEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TypeEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TypeEntity>)));
        }

        /// <summary>
        /// Retrieves the list of teaching event types. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TypeEntity&gt;</returns>
        public List<TypeEntity> GetTeachingEventTypes ()
        {
             ApiResponse<List<TypeEntity>> localVarResponse = GetTeachingEventTypesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the list of teaching event types. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TypeEntity&gt;</returns>
        public ApiResponse< List<TypeEntity> > GetTeachingEventTypesWithHttpInfo ()
        {

            var localVarPath = "/api/types/teaching_event/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeachingEventTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TypeEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TypeEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TypeEntity>)));
        }

        /// <summary>
        /// Retrieves the list of teaching event types. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TypeEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<TypeEntity>> GetTeachingEventTypesAsync ()
        {
             ApiResponse<List<TypeEntity>> localVarResponse = await GetTeachingEventTypesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves the list of teaching event types. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TypeEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TypeEntity>>> GetTeachingEventTypesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/types/teaching_event/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeachingEventTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TypeEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TypeEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TypeEntity>)));
        }

        /// <summary>
        /// Retrieves the list of teaching subjects. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TypeEntity&gt;</returns>
        public List<TypeEntity> GetTeachingSubjects ()
        {
             ApiResponse<List<TypeEntity>> localVarResponse = GetTeachingSubjectsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the list of teaching subjects. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TypeEntity&gt;</returns>
        public ApiResponse< List<TypeEntity> > GetTeachingSubjectsWithHttpInfo ()
        {

            var localVarPath = "/api/types/teaching_subjects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeachingSubjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TypeEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TypeEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TypeEntity>)));
        }

        /// <summary>
        /// Retrieves the list of teaching subjects. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TypeEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<TypeEntity>> GetTeachingSubjectsAsync ()
        {
             ApiResponse<List<TypeEntity>> localVarResponse = await GetTeachingSubjectsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves the list of teaching subjects. 
        /// </summary>
        /// <exception cref="GetIntoTeachingApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TypeEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TypeEntity>>> GetTeachingSubjectsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/types/teaching_subjects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeachingSubjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TypeEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TypeEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TypeEntity>)));
        }

    }
}
